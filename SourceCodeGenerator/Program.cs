using System;
using System.IO;
using System.Text;

namespace SourceCodeGenerator
{
    internal static class Program
    {
        private static void Main()
        {
            var baseDirectoryPath = new FileInfo(typeof(Program).Assembly.Location).Directory?.Parent?.Parent?.Parent?.Parent ?? throw new Exception();
            if (baseDirectoryPath.Name != "SimpleFileNameRenumberer")
                throw new Exception();

            GenerateBitmapOperation(Path.Combine(baseDirectoryPath.FullName, "SimpleFileNameRenumberer.CUI"));

            Console.WriteLine("Completed.");
            Console.Beep();
            _ = Console.ReadLine();
        }

        private static void GenerateBitmapOperation(string coreProjectPath)
        {
            var outputPath = Path.Combine(coreProjectPath, "BitmapOperation.AutoGenerated.cs");
            if (File.Exists(outputPath))
            {
                var outputFileAttribute = File.GetAttributes(outputPath);
                File.SetAttributes(outputPath, outputFileAttribute & ~FileAttributes.ReadOnly);
            }

            try
            {
                using var sourceWriter = new StreamWriter(outputPath, false, Encoding.UTF8);
                sourceWriter.WriteLine("using System.Runtime.CompilerServices;");
                sourceWriter.WriteLine("using System.Runtime.Intrinsics;");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("namespace SimpleFileNameRenumberer.CUI");
                sourceWriter.WriteLine("{");
                sourceWriter.WriteLine("    internal static partial class BitmapOperation");
                sourceWriter.WriteLine("    {");
                WriteIsMonochromeImage(sourceWriter, true);
                sourceWriter.WriteLine();
                WriteIsMonochromeImage(sourceWriter, false);
                sourceWriter.WriteLine("    }");
                sourceWriter.WriteLine("}");
            }
            finally
            {
                var outputFileAttribute = File.GetAttributes(outputPath);
                File.SetAttributes(outputPath, outputFileAttribute | FileAttributes.ReadOnly);
            }

            static void WriteIsMonochromeImage(TextWriter sourceWriter, bool isAligned)
            {
                var listOfVectorBitLength = new[] { 512, 256, 128 };
                var isFirstItem = true;

                sourceWriter.WriteLine($"        #region IsMonochromeImage{(isAligned ? "Aligned" : "")}");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine($"        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]");
                sourceWriter.WriteLine($"        public static unsafe bool IsMonochromeImage{(isAligned ? "Aligned" : "")}({(isAligned ? "uint" : "byte")}* buffer, uint elementLength)");
                sourceWriter.WriteLine($"        {{");
                if (isAligned)
                {
                    sourceWriter.WriteLine($"            var pixelData = buffer[0];");
                    sourceWriter.WriteLine($"            var ptr = &buffer[1];");
                    sourceWriter.WriteLine($"            var elementCount = elementLength - 1;");
                }
                else
                {
                    sourceWriter.WriteLine($"            var pixelData = ((uint)buffer[0] << (8 * 0)) | ((uint)buffer[1] << (8 * 1)) | ((uint)buffer[2] << (8 * 2)) | ((uint)buffer[3] << (8 * 3));");
                    sourceWriter.WriteLine($"            var ptr = &buffer[4];");
                    sourceWriter.WriteLine($"            var elementCount = elementLength - 1;");
                }

                foreach (var vectorBitLength in listOfVectorBitLength)
                {
                    sourceWriter.WriteLine($"            {(isFirstItem ? "" : "else ")}if (Vector{vectorBitLength}.IsHardwareAccelerated && Vector{vectorBitLength}<uint>.IsSupported)");
                    isFirstItem = false;
                    sourceWriter.WriteLine($"            {{");
                    sourceWriter.WriteLine($"                var v = Vector{vectorBitLength}.Create(pixelData);");
                    sourceWriter.WriteLine($"                while (elementCount >= (uint)Vector{vectorBitLength}<uint>.Count * 32u)");
                    WriteVectorizedLoopStatements(sourceWriter, isAligned, vectorBitLength, 32);
                    sourceWriter.WriteLine();
                    sourceWriter.WriteLine($"                if (elementCount >= (uint)Vector{vectorBitLength}<uint>.Count * 16u)");
                    WriteVectorizedLoopStatements(sourceWriter, isAligned, vectorBitLength, 16);
                    sourceWriter.WriteLine();
                    sourceWriter.WriteLine($"                if (elementCount >= (uint)Vector{vectorBitLength}<uint>.Count * 8u)");
                    WriteVectorizedLoopStatements(sourceWriter, isAligned, vectorBitLength, 8);
                    sourceWriter.WriteLine();
                    sourceWriter.WriteLine($"                if (elementCount >= (uint)Vector{vectorBitLength}<uint>.Count * 4u)");
                    WriteVectorizedLoopStatements(sourceWriter, isAligned, vectorBitLength, 4);
                    sourceWriter.WriteLine();
                    sourceWriter.WriteLine($"                if (elementCount >= (uint)Vector{vectorBitLength}<uint>.Count * 2u)");
                    WriteVectorizedLoopStatements(sourceWriter, isAligned, vectorBitLength, 2);
                    sourceWriter.WriteLine();
                    sourceWriter.WriteLine($"                if (elementCount >= (uint)Vector{vectorBitLength}<uint>.Count * 1u)");
                    WriteVectorizedLoopStatements(sourceWriter, isAligned, vectorBitLength, 1);
                    sourceWriter.WriteLine();
                    sourceWriter.WriteLine($"                if (elementCount > 0)");
                    sourceWriter.WriteLine($"                {{");
                    sourceWriter.WriteLine($"                    if (elementLength >= (uint)Vector{vectorBitLength}<uint>.Count)");
                    sourceWriter.WriteLine($"                    {{");
                    if (isAligned)
                        sourceWriter.WriteLine($"                        if (!Vector{vectorBitLength}.EqualsAll(Vector{vectorBitLength}.Load(buffer + elementLength - (uint)Vector{vectorBitLength}<uint>.Count), v))");
                    else
                        sourceWriter.WriteLine($"                        if (!Vector{vectorBitLength}.EqualsAll(Vector{vectorBitLength}.Load((uint*)(buffer + sizeof(uint) * (elementLength - (uint)Vector{vectorBitLength}<uint>.Count))), v))");
                    sourceWriter.WriteLine($"                            return false;");
                    sourceWriter.WriteLine($"                    }}");
                    sourceWriter.WriteLine($"                    else");
                    sourceWriter.WriteLine($"                    {{");
                    sourceWriter.WriteLine($"                        do");
                    sourceWriter.WriteLine($"                        {{");
                    if (isAligned)
                    {
                        sourceWriter.WriteLine($"                            if (*ptr != pixelData)");
                        sourceWriter.WriteLine($"                                return false;");
                        sourceWriter.WriteLine($"                            ++ptr;");
                        sourceWriter.WriteLine($"                            --elementCount;");
                    }
                    else
                    {
                        sourceWriter.WriteLine($"                            if ((((uint)ptr[0] << (8 * 0)) | ((uint)ptr[1] << (8 * 1)) | ((uint)ptr[2] << (8 * 2)) | ((uint)ptr[3] << (8 * 3))) != pixelData)");
                        sourceWriter.WriteLine($"                                return false;");
                        sourceWriter.WriteLine($"                            ptr += sizeof(uint);");
                        sourceWriter.WriteLine($"                            --elementCount;");
                    }

                    sourceWriter.WriteLine($"                        }} while (elementCount > 0);");
                    sourceWriter.WriteLine($"                    }}");
                    sourceWriter.WriteLine($"                }}");
                    sourceWriter.WriteLine();
                    sourceWriter.WriteLine($"                return true;");
                    sourceWriter.WriteLine($"            }}");
                }

                sourceWriter.WriteLine($"            else");
                sourceWriter.WriteLine($"            {{");
                sourceWriter.WriteLine($"                while (elementCount >= 32u)");
                WriteNonVectorizedLoopStatements(sourceWriter, isAligned, 32);
                sourceWriter.WriteLine();
                sourceWriter.WriteLine($"                if (elementCount >= 16u)");
                WriteNonVectorizedLoopStatements(sourceWriter, isAligned, 16);
                sourceWriter.WriteLine();
                sourceWriter.WriteLine($"                if (elementCount >= 8u)");
                WriteNonVectorizedLoopStatements(sourceWriter, isAligned, 8);
                sourceWriter.WriteLine();
                sourceWriter.WriteLine($"                if (elementCount >= 4u)");
                WriteNonVectorizedLoopStatements(sourceWriter, isAligned, 4);
                sourceWriter.WriteLine();
                sourceWriter.WriteLine($"                if (elementCount >= 2u)");
                WriteNonVectorizedLoopStatements(sourceWriter, isAligned, 2);
                sourceWriter.WriteLine();
                sourceWriter.WriteLine($"                if (elementCount > 0)");
                sourceWriter.WriteLine($"                {{");
                if (isAligned)
                {
                    sourceWriter.WriteLine($"                    if (ptr[0] != pixelData)");
                    sourceWriter.WriteLine($"                        return false;");
                }
                else
                {
                    sourceWriter.WriteLine($"                    if ((((uint)ptr[0] << (8 * 0)) | ((uint)ptr[1] << (8 * 1)) | ((uint)ptr[2] << (8 * 2)) | ((uint)ptr[3] << (8 * 3))) != pixelData)");
                    sourceWriter.WriteLine($"                        return false;");
                }

                sourceWriter.WriteLine($"                }}");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine($"                return true;");
                sourceWriter.WriteLine($"            }}");
                sourceWriter.WriteLine($"        }}");
                sourceWriter.WriteLine();
                sourceWriter.WriteLine("        #endregion");

                static void WriteVectorizedLoopStatements(TextWriter sourceWriter, bool isAligned, int vectorBitLength, int n)
                {
                    sourceWriter.WriteLine($"                {{");
                    for (var count = 0; count < n; ++count)
                    {
                        if (isAligned)
                        {
                            sourceWriter.WriteLine($"                    if (!Vector{vectorBitLength}.EqualsAll(Vector{vectorBitLength}.Load(ptr + (uint)Vector{vectorBitLength}<uint>.Count * {(isAligned ? count : count * sizeof(uint))}u), v))");
                            sourceWriter.WriteLine($"                        return false;");
                        }
                        else
                        {
                            sourceWriter.WriteLine($"                    if (!Vector{vectorBitLength}.EqualsAll(Vector{vectorBitLength}.Load((uint*)(ptr + (uint)Vector{vectorBitLength}<uint>.Count * {(isAligned ? count : count * sizeof(uint))}u)), v))");
                            sourceWriter.WriteLine($"                        return false;");
                        }
                    }

                    sourceWriter.WriteLine($"                    ptr += (uint)Vector{vectorBitLength}<uint>.Count * {(isAligned ? n : n * sizeof(uint))}u;");
                    sourceWriter.WriteLine($"                    elementCount -= (uint)Vector{vectorBitLength}<uint>.Count * {n}u;");
                    sourceWriter.WriteLine($"                }}");
                }

                static void WriteNonVectorizedLoopStatements(TextWriter sourceWriter, bool isAligned, int n)
                {
                    sourceWriter.WriteLine($"                {{");
                    for (var count = 0; count < n; ++count)
                    {
                        if (isAligned)
                        {
                            sourceWriter.WriteLine($"                    if (ptr[{count}] != pixelData)");
                            sourceWriter.WriteLine($"                        return false;");
                        }
                        else
                        {
                            sourceWriter.WriteLine($"                    if ((((uint)ptr[{count * sizeof(uint) + 0}] << (8 * 0)) | ((uint)ptr[{count * sizeof(uint) + 1}] << (8 * 1)) | ((uint)ptr[{count * sizeof(uint) + 2}] << (8 * 2)) | ((uint)ptr[{count * sizeof(uint) + 3}] << (8 * 3))) != pixelData)");
                            sourceWriter.WriteLine($"                        return false;");
                        }
                    }

                    if (isAligned)
                        sourceWriter.WriteLine($"                    ptr += {n}u;");
                    else
                        sourceWriter.WriteLine($"                    ptr += {n * sizeof(uint)}u;");
                    sourceWriter.WriteLine($"                    elementCount -= {n}u;");
                    sourceWriter.WriteLine($"                }}");
                }
            }
        }
    }
}

